#!/usr/bin/perl

use strict;
use warnings;

use Glib qw(TRUE FALSE);
use Gtk2 '-init';
use Data::Dumper;
use FindBin qw($RealBin);

# Use Glib::Object::Introspection
# since GStreamer1.0 has no perl binding
use Glib::Object::Introspection;
foreach my $name ('', (
    #'Allocators',
    'App',
    #'Audio',
    'Base',
    #'Check',
    'Controller',
    #'Fft',
    #'InsertBin',
    #'Mpegts',
    #'Net',
    #'Pbutils',
    #'Riff',
    #'Rtp',
    #'Rtsp',
    #'Sdp',
    #'Tag',
    'Video',
  )) {
  my $basename = 'Gst' . $name;
  my $pkg      = $name
  ? 'GStreamerCroco' . $name
  : 'GStreamerCroco';
  Glib::Object::Introspection->setup(
    basename => $basename,
    version  => '1.0',
    package  => $pkg,
  );
}
GStreamerCroco::init([ $0, @ARGV ]);

# Global variables
#my $stream_url = 'https://radiocroco.info/streaming/radiocroco_64.mp3'; # Stream url from radiocroco.info
my $stream_url = 'http://vdl.stream-lat.org:8000/voixdulat_mp3'; # While radicroco is silent, alternative stream url from asso.libre-a-toi.org
my $loop; # GTK main loop
my $window; # GTK top level window
my $player; # GStreamer playerbin2 pipeline
my $vis; # GStreamer visualization plugin (goom2k)
my $canvas; # Canvas to display music visalization when playing or static image otherwise
my $status; # Status label widget
my $play_stop_button; # Togglable button
my $play_stop_status = 1; # Status of togglable button (play=1/stop=0)
my $pixbuf = Gtk2::Gdk::Pixbuf->new_from_file("$RealBin/radiocroco.png"); # Static image

# Gstreamer bus callback
sub bus_callback {
  my ($bus, $message) = @_;

  if ($message->type & 'eos') {
    $loop -> quit();
  }

  elsif ($message->type & 'error') {
    $loop -> quit();
  }
  else {
    my $struct = $message->get_structure;
    if ($struct && $struct->get_name eq 'prepare-window-handle') {
      my $vis_sink = $player->get_by_name('videosink-actual-sink-xvimage');
      if ($vis_sink) {
        $message->src->set_window_handle($canvas->window->get_xid);
      }
      $status->set_label('Playing');
    }
  }
  return TRUE;
}

# Play/Stop handler
sub play_stop {
  # Toggle status
  $play_stop_status = not $play_stop_status;

  # Play
  if ($play_stop_status) {
    $player->set_state('playing');
    $status->set_label('Connecting to stream...');
    $play_stop_button->set_label('Stop');
    # Dirty hack if window was previously resized
    $window->resize(320, 408);
  }
  # Stop
  else {
    $player->set_state('ready');
    $status->set_label('Stopped');
    $play_stop_button->set_label('Play');
    # Dirty hack to clear window
    $window->unmaximize;
    $window->resize(321, 408);
  }
}

# Display static image when not playing
sub canvas_expose {
  my $area = shift;
  my $event = shift;
  if ($status->get_label ne 'Playing') {
    my $gc = Gtk2::Gdk::GC->new($canvas->get_window);
    $area->get_window->draw_pixbuf($gc, $pixbuf, 0, 0, (($event->area->width - $pixbuf->get_width) / 2), (($event->area->height - $pixbuf->get_height) / 2), -1, -1, 'none', 0, 0);
  }
}

# Create the main loop and pipeline
$loop = Glib::MainLoop->new(undef, FALSE);
$player = GStreamerCroco::ElementFactory::make('playbin' => 'player');
$vis = GStreamerCroco::ElementFactory::make('goom2k1' => 'vis');
$player->set('vis-plugin', $vis);
$player->set('flags', ['video', 'audio', 'text', 'soft-volume', 'vis', 'download', 'buffering']);

# Create container widgets
$window = Gtk2::Window->new('toplevel');
$window->set_title("Radio Croco");
$window->set_icon($pixbuf);
my $vbox = Gtk2::VBox->new(FALSE, 10);
my $buttons = Gtk2::HButtonBox->new;

# Add a label
my $label = Gtk2::Label->new("Radio Croco");
$vbox->pack_start($label, FALSE, FALSE, 10);

# Add canvas for vizualization plugin
$canvas = Gtk2::DrawingArea->new;
$canvas->size(320, 240);
$vbox->pack_start($canvas, TRUE, TRUE, 10);

# Add a status label
$status = Gtk2::Label->new("Connecting to stream...");
$vbox->pack_start($status, FALSE, FALSE, 0);

# Add stream url as text entry
my $text = Gtk2::Entry->new;
$text->set_text($stream_url);
$text->set_editable(FALSE);
$vbox->pack_start($text, FALSE, FALSE, 0);

# Playback controls
$vbox->pack_start($buttons, FALSE, TRUE, 0);

# Display window
$window->add($vbox);
$window->signal_connect(delete_event => sub {$player->set_state('null'); exit;});
$window->show_all;

# Display static image when not playing
$canvas->signal_connect (expose_event => \&canvas_expose);

# Set player source to stream URI
$player->set(uri => $stream_url);

# Play/Stop button
$play_stop_button = Gtk2::Button->new('Stop');
$play_stop_button->signal_connect(clicked => \&play_stop);
$buttons->add($play_stop_button);
$play_stop_button->show_all;

# Exit button
my $exit_button = Gtk2::Button->new('Exit');
$exit_button->signal_connect(clicked => sub {$player->set_state('null'); exit;});
$buttons->add($exit_button);
$exit_button->show_all;

# Set bus callback to detect when visualization sink is created
$player->get_bus->add_signal_watch;
$player->get_bus->signal_connect('message::element' => \&bus_callback);
$player->get_bus->signal_connect('message::eos' => \&bus_callback);
$player->get_bus->signal_connect('message::error' => \&bus_callback);

# Play stream
$player->set_state('playing');

# Run the program
$loop->run;

# Cleanup
$player->set_state('null');
