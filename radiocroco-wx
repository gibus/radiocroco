#!/usr/bin/perl

use strict;
use warnings;

# Main window
package RadioCrocoFrame;
use Wx qw(:frame :sizer :panel :window :id :textctrl :misc);
use base qw(Wx::Frame);
use Wx::Event qw(EVT_CLOSE EVT_BUTTON); # Event registration function

# Constructor
sub new {
  my($class, $parent, $url) = @_;

  # Create top frame
  my $self = $class->SUPER::new(
    $parent,        # parent window
    -1,             # ID -1 means any
    'Radio Croco',  # title
    [-1, -1],       # default position
    [-1, -1],       # size
    wxDEFAULT_FRAME_STYLE,
  );

  # Set stream url class variable
  $self->{stream_url} = $url;
  # Class variable to store status (play=1/stop=0)
  $self->{play_status} = 0;

  # Create BoxSizer
  $self->{topsizer} = Wx::BoxSizer->new(wxVERTICAL);

  # Controls should not be placed directly inside
  # a frame, use a Wx::Panel instead
  $self->{panel} = Wx::Panel->new(
    $self,    # parent
    -1,       # ID
    [-1, -1], # default position
    [-1, -1], # size
    wxTAB_TRAVERSAL|wxBORDER_NONE,
  );

  # Create text to display information
  $self->{text} = Wx::TextCtrl->new(
    $self->{panel},
    -1,
    "Radio Croco\nStream from $self->{stream_url}\n",
    wxDefaultPosition,
    [640, 60],
    wxTE_DONTWRAP|wxTE_MULTILINE|wxTE_READONLY,
  );
  $self->{topsizer}->Add(
    $self->{text},
    1,           # make vertically stretchable
    wxEXPAND |   # make horizontally stretchable
    wxALL,       #    and make border all around
    10,          # set border width to 10
  );

  # Create Buttons
  $self->{play_stop_btn} = Wx::Button->new($self->{panel}, wxID_OK, 'Play');
  $self->{exit_btn} = Wx::Button->new($self->{panel}, wxID_EXIT, 'Exit');
  $self->{buttonsizer} = Wx::BoxSizer->new(wxHORIZONTAL);
  $self->{buttonsizer}->Add(
    $self->{play_stop_btn},
    0,           # make horizontally unstretchable
    wxALL,       # make border all around (implicit top alignment)
    10           # set border width to 10
  );
  $self->{buttonsizer}->Add(
    $self->{exit_btn},
    0,           # make horizontally unstretchable
    wxALL,       # make border all around (implicit top alignment)
    10           # set border width to 10
  );
  $self->{topsizer}->Add(
    $self->{buttonsizer},
    0,             # make vertically unstretchable
    wxALIGN_CENTER # no border and centre horizontally
  );
  $self->{panel}->SetSizer($self->{topsizer});
  $self->{mainsizer} = Wx::BoxSizer->new(wxVERTICAL);
  $self->{mainsizer}->Add($self->{panel}, 1, wxEXPAND|wxALL, 0);
  # Use the sizer for layout and size frame
  # preventing it from being resized to a
  # smaller size;
  $self->SetSizerAndFit($self->{mainsizer});

  # Register the OnClick method as an handler for the
  # 'button clicked' event. The first argument is a Wx::EvtHandler
  # that receives the event
  EVT_BUTTON($self, $self->{play_stop_btn}, \&OnPlayStop);
  EVT_BUTTON($self, $self->{exit_btn}, \&OnClose);

  return $self;
}

# Play/Stop handler
sub OnPlayStop {
  my($self, $event) = @_;
  # Toggle status
  $self->{status} = not $self->{status};

  # Play
  if ($self->{status}) {
    # Fork process
    $self->{mplayer_pid} = fork();
    # Change Play/Stop label in parent process
    if ($self->{mplayer_pid}) {
      $self->{play_stop_btn}->SetLabel('Stop');
    }
    # Launch gstreamer in child process
    else {
      exec('gst-launch', '--quiet', 'playbin', "uri=$self->{stream_url}");
    }
  }
  # Stop
  else {
    # Kill gstreamer child process
    kill 9, $self->{mplayer_pid};
    # Change Play/Stop label
    $self->{play_stop_btn}->SetLabel('Play');
  }

}

# Exit handler
sub OnClose {
  my($self, $event) = @_;
  # Kill gstreamer child process if any
  if ($self->{mplayer_pid}) {
    kill 9, $self->{mplayer_pid};
  }
  $Wx::wxTheApp->ExitMainLoop;
  $event->Skip;
}

# Application object class
package RadioCrocoGUI;
use base qw(Wx::App);

# Override OnInit to build the window
sub OnInit {
  my ($self) = shift;

  # Stream url from radiocroco.info
  my $stream_url = 'https://radiocroco.info/streaming/radiocroco_64.mp3';

  # Create a new frame (a frame is a top level window)
  my $frame = RadioCrocoFrame->new(undef, $stream_url);
  # Set it as top frame.
  $self->SetTopWindow($frame);
  # Show the frame
  $frame->Show(1);
}

# Main package
package main;

# Create the application object, this will call OnInit
my $app = RadioCrocoGUI->new();
# Process GUI events from the application this function will not
# return until the last frame is closed
$app->MainLoop();
